##########################################################################
#
#    Neet: Network discovery, enumeration and security assessment tool
#    Copyright (C) 2008-2014 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################

# This Template is provided for use as a basis for your own modules.

# In case you haven't guessed, this is written in PERL. The code is run in a 'strict' environment, so
# make sure to use "my" to limit the scope of your variables, or the module will fail to load.

# The only code areas you should modify are:

# * The "Customise these parameters" area in the "new" subroutine
# * The code for the actual test in the "activate" subroutine, after "Beginning of module-specific code"
#   and before "End of module-specific code".

# The rest of the code should remain unmodified. You may wish to remove a lot of these example comments
# for the sake of readability of your code.
package SMB;

sub new {
	my $pkg=shift();
	my %struct;
	$struct{'Name'}=$pkg;
	$struct{'MainScan'}=shift();
	my $self=\%struct;
	bless $self, $pkg;

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>
	# Customise these parameters

	# If $struct{'Enabled'} is 0, the module won't be loaded, and therefore won't test anything.
	# As this is a template module, we don't really want it to run.
	$struct{'Enabled'}=1;

	# If your module only tests a UDP or TCP service, put a lower-case protocol name in $struct{'Protocol'}.
	$struct{'Protocol'}='';

	# @{$struct{'WatchFiles'}} is an array of files to watch in the "services" directory.
	# You can specify more than one. If any of them change, your module will be activated with the new services.
	@{$struct{'WatchFiles'}}=("smb.txt","netbios-ns.txt");

	# Cost is used to determine how resource-intensive your module is. As modules are started, their cost is added
	# up, and once the budget is reached, no more modules will start until some finish and release more budget.
	# As a rule, 10 is a lightweight test, and 100 is something intensive like nikto or an SMB brute-force.
	$struct{'Cost'}=20;

	# $struct{'OnePerHost'} should be 0 if more than one instance of this service is to be tested per host. Most
	# modules will be set this way. If it is set to 1, then your module will only be told about the host IP, and
	# not a protocol or port. Services such as SMB are typically need a setting of 1, otherwise all the SMB tests
	# will be performed on both 139 and 445.
	$struct{'OnePerHost'}=1;

	# $struct{'MaxInstances'} determines the maximum number of instances of this service that are allowed to run
	# simultaneously, even if there is room in the budget to run more. This is to prevent some modules hogging
	# all the resources. A value of 0 means that there is no limit (apart from the budget constraints).
	$struct{'MaxInstances'}=2;

	#	$struct{'ConflictingModules'} is an array containing the names (without file extensions) of modules which
	# should prevent this one from running.
	@{$struct{'ConflictingModules'}}=('');

	# End parameter customisation
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>

	return $self;
}

sub activate {
	# This is the subroutine that contains the actual code. 
  # First, some code which will be common to all modules - setting up the environment
	my $self=shift();
	my $MainScan=$$self{'MainScan'};
	my $target=shift();
	my $file=shift();
	my $threadID=Neet::threads->tid;
	my $cost=$$self{'Cost'};
	my $name=$$self{'Name'};
	my $Config=$MainScan->Config;
	my $Log=$MainScan->Log;
	my ($host,$protport) = split (":", $target);
	my $socket=$host;
	my $credentialManager=$MainScan->CredentialManager;
	my ($protocol,$port);
	my $outputDir=$MainScan->ResultsDirectory . "/$host";
	my $resourceDir=$MainScan->ResourceDirectory . "/modules/$name";
	my ($targetType,$interface)=$MainScan->IsHostLocal($host);
	($protocol,$port) = split ("/", $protport) if ($protport);
	$socket .= ":$port" if ($port);
	return 0 if ($protocol && $$self{'Protocol'} && ("$protocol" ne "$$self{'Protocol'}"));
	# Don't scan if the host is cancelled
	if ($MainScan->IsHostCancelled($host)){
		$Log->Status ("$name (thread $threadID) -> scans against $target CANCELLED\n","LOGONLY");
		return 0;
	}
	$0 = "Neet - GSM: $name thread $threadID testing $target";

	if (!$self->IsScanComplete("$name","$target")){
		# Tell the user what we're doing
		$Log->Status ("GSM $name (thread $threadID) -> Scanning $socket ($targetType $interface)\n");

		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>
		#>>>>>>>>>>>>> Beginning of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>

		# These are the variables you can use in your code:
		# $target - the raw target specification as it is supplied to this subroutine by the scheduler.
		#           Unless you want to process this for any particular reason, you're better off using the
    #           $host, $protocol, $port or $socket variables below.
		# $file - the filename from which the target was selected. This is useful when your module is monitoring
		# 					multiple files. You can use this to alter the behaviour of your module accordingly.
		# $host - the IP address of the target
		# $port - the port on which the service is listening (not set for "OnePerHost" modules)
		# $protocol - the protocol on which the service is listening (not set for "OnePerHost" modules)
		# $socket - same as $host, unless $port is set, in which case it is set to "$host:$port".
		# $name - the name of this module
		# $cost - the cost of this module
		# $threadID - the Perl ithread ID for this thread
		# $outputDir - the full absolute path to the directory of results for this $host
		# $resourceDir - the full absolute path to the directory of resources for this module.
		#                This is normally /usr/local/share/neet/resources/modules/$name, so for this
		#                module, $resourceDir would be /usr/local/share/neet/resources/modules/Example

		# These are the objects you can access
		# $self - This module
		# $MainScan - MainScan object, which provides most of neet's method calls.
		# $Config - The interface to the configuration file
		# $Log - The interface to the logging and screen printing mechanism

		# The API for recording issues is as follows:
		# RecordIssue(target, label, text)
		# RecordVulnerability(target, label, text)
		#	RecordCompromise(target, label, text)
		#	StoreGuessedPassword(target, level, service, username, password, label, text)
		# MissingPatch(target, level, service, patch, label, text)
		#	ConfigError(target, level, label, text)

		# Include any Perl modules you may require

		# Set up the signal handler for exiting cleanly
		$SIG{'USR1'}=sub{
			$self->SetScanInComplete("$name","$target");
			Neet::threads->exit();
		};

		# And now the code for the actual test:

		my %roles = (
			'00', 'Workstation Service',
			'01', 'Messenger Service', '03', 'Messenger Service','06', 'RAS Server Service',
			'1f', 'NetDDE Service','20', 'File Server Service','21', 'RAS Client Service','22', 'Microsoft Exchange Interchange(MSMail Connector)',
 			'23', 'Microsoft Exchange Store','24', 'Microsoft Exchange Directory','30', 'Modem Sharing Server Service','31', 'Modem Sharing Client Service',
			'43', 'SMS Clients Remote Control','44', 'SMS Administrators Remote Control Tool','45', 'SMS Clients Remote Chat', '46', 'SMS Clients Remote Transfer',
			'4c', 'DEC Pathworks TCPIP service on Windows NT', '42', 'McAfee AV', '52', 'DEC Pathworks TCPIP service on Windows NT', '87', 'Microsoft Exchange MTA',
			'6a', 'Microsoft Exchange IMC', 'be', 'Network Monitor Agent', 'bf', 'Network Monitor Application', '1b', 'Domain Master Browser', '1d', 'Master Browser',
			'2b', 'Lotus Notes Server Service',
		);

		my %groles = (
		  '00', 'Domain Name', '01', 'Master Browser',  '1e', 'Browser Service Elections', '1c', 'Domain Controller', '2f', 'Lotus Notes', '33', 'Lotus Notes'
		);

		my ($HostName,$Workgroup,$SID,@Roles,$Domain,$DomainController);
		my ($hasNoLockout,$ridcycledOK)=(0,0);

		# ******************
		# NetBIOS Name Table
		if (!$self->IsScanComplete("nmblookup","$host")){
			my $command=$MainScan->getPath("nmblookup") . " -A $host > $outputDir/raw/nmblookup.txt 2>$outputDir/raw/nbenumerrors.log";
			$MainScan->System("$command");
			my @Roles;

			if (-f "$outputDir/raw/nmblookup.txt" && (my @nmblookup=$MainScan->ReadFile("$outputDir/raw/nmblookup.txt"))){
				mkdir "$outputDir/netbios";
				for my $line (@nmblookup){
					chomp $line;
					next if ($line !~ /\S/);
					next if ($line =~ /^Looking up the status of|^No reply from/);
					$line =~ s/^\s+//g;
					if ($line =~ /<[\d|a-f]{2}>/){
						my $desc;
						my $code=$line; $code =~ s/[\S\s]+<([\d|a-f]{2})>[\S\s]+/$1/;
						my $hname=substr($line,0,index($line," "));

						if ($line =~ /<GROUP>/){
							$desc=$groles{$code};
							$MainScan->SetStatValue("$outputDir/hostInfo.txt","Workgroup","$hname") if ($code eq "00");
						} else {
							$desc=$roles{$code};
							if (($code eq "00") && ($hname !~ /~/)){
								$MainScan->SetStatValue("$outputDir/hostInfo.txt","Hostname","$hname");
								$MainScan->SetStatValue($MainScan->ResultsDirectory . "/hostnames.txt","$host","$hname");
								$HostName=$hname;
							}
						}
						$desc = "UNKNOWN" if (!defined($desc));
						push @Roles, "${hname} ${desc}";
						if ($desc eq "Domain Name"){
							$Domain=$hname;
							# Write Domain to hostInfo.txt
							$MainScan->SetStatValue("$outputDir/hostInfo.txt","Domain","$Domain");
							# Pull list of machines in the domain
							my $command=$MainScan->getPath("nmblookup") . " $host $Domain 2>>$outputDir/raw/nbenumerrors.log | grep -v query > $outputDir/netbios/machines-$Domain.txt ";
							$MainScan->System("$command");
							$command=$MainScan->getPath("nmblookup") . " -M $host $Domain 2>>$outputDir/raw/nbenumerrors.log | grep '>' > $outputDir/netbios/masterBrowser-$Domain.txt";
							$MainScan->System("$command");
						}
						if ($desc eq "Domain Controller"){
							$DomainController=1;
						}
						$MainScan->SetListItem("$outputDir/netbios/nmblookup.txt","$line $desc");
					}
				}

				# Write roles to hostInfo.txt
				if ($#Roles > -1){
					my $roles=join (",",@Roles);
					$MainScan->SetStatValue("$outputDir/hostInfo.txt","Roles","$roles");
					if ($Domain){
						$MainScan->SetListItem($MainScan->ResultsDirectory . "/domains.txt","$Domain");
							if ($DomainController){
								my $_name=$host;
							  $_name .= " $HostName" if ($HostName);
								$MainScan->SetStatValue($MainScan->ResultsDirectory . "/domains.txt","$Domain","$_name");
							}
					}
				}					
				$self->SetScanComplete("nmblookup","$host");
			}
		}

		# Identify the SMB Type
		if (!$self->IsScanComplete("smbtype","$host")){
			my $command=$MainScan->getPath("smbclient") . " -L //${host} -U '' -N > $outputDir/raw/smbclient-list.txt 2>&1";
			$MainScan->System("$command");

			if (-f "$outputDir/raw/smbclient-list.txt" && (my @smbfile=$MainScan->ReadFile("$outputDir/raw/smbclient-list.txt"))){
				my ($win,$apple)=(0,0);
				for my $line (@smbfile){
					if ($line =~ /OS=\[Windows/){
						$MainScan->SetStatValue("$outputDir/hostInfo.txt","SMBType","Windows");
						$win=1;
						last;
					} elsif ($line =~ /OS=\[Apple/){
						$MainScan->SetStatValue("$outputDir/hostInfo.txt","SMBType","Apple");
						$apple=1;
						last;
					}
				}
				$MainScan->SetStatValue("$outputDir/hostInfo.txt","SMBType","Samba") if (!$win && !$apple);
			}
			$self->SetScanComplete("smbtype","$host");
		}

		# Enumerating domain sid
		if (!$self->IsScanComplete("domainsid","$host")){
		  $command=$MainScan->getPath("rpcclient") . " //${host} -U '' -N -c lsaquery > $outputDir/raw/domainsid.txt 2>>$outputDir/raw/nbenumerrors.log";
			my $error=$MainScan->System("$command");
			if ($error){
				sleep (int(rand(3))+1);
				my $error=$MainScan->System("$command");
			}
			if (-f "$outputDir/raw/domainsid.txt" && (my @sidfile=$MainScan->ReadFile("$outputDir/raw/domainsid.txt"))){
				for my $line (@sidfile){
					chomp $line;
					if ($line =~ /^Domain Name:/){
						my ($j,$Domain)=split(": ",$line);
						# Write Domain to hostInfo.txt
						$MainScan->SetStatValue("$outputDir/hostInfo.txt","Domain","$Domain");
					}
					if ($line =~ /^Domain Sid:/){
						($j,$Sid)=split(": ",$line);
						# Write Sid to hostInfo.txt
						if (length($Sid) < 32){
							# Samba
						  $command=$MainScan->getPath("rpcclient") . " //${host} -U '' -N -c 'lookupnames root' > $outputDir/raw/rootsid.txt 2>>$outputDir/raw/nbenumerrors.log";
							$MainScan->System("$command");
							if (-f "$outputDir/raw/rootsid.txt" && (my @rsidfile=$MainScan->ReadFile("$outputDir/raw/rootsid.txt"))){
								for my $line (@rsidfile){
									if ($line =~ /^root S\-/){
										my ($j,$sid,@trash)=split " ", $line; my @comp;
										if ($sid){
										 @comp=split "\\-", $sid; pop (@comp); $sid = join "-", @comp;
											$MainScan->SetStatValue("$outputDir/hostInfo.txt","DomainSID","$sid");
										}
									}
									last;
								}		
							}
							#$MainScan->SetStatValue("$outputDir/hostInfo.txt","SMBType","Samba");					
						} else {
							# Windows
							$MainScan->SetStatValue("$outputDir/hostInfo.txt","DomainSID","$Sid");
							#$MainScan->SetStatValue("$outputDir/hostInfo.txt","SMBType","Windows");					
						}
					}
				}
				# Mark scan as complete
				$self->SetScanComplete("domainsid","$host");
			}
		}

		# Domain Trusts
		if (!$self->IsScanComplete("domaintrusts","$host")){
		  $command=$MainScan->getPath("rpcclient") . " //${host} -U '' -N -c enumtrust > $outputDir/netbios/domaintrusts.txt 2>>$outputDir/raw/nbenumerrors.log";
			$MainScan->System("$command");

			if (-f "$outputDir/netbios/domaintrusts.txt"){
				# Mark scan as complete
				$self->SetScanComplete("domaintrusts","$host");
			} else {
				unlink "$outputDir/netbios/domaintrusts.txt";
			}
		}

		# Domain Info
		if (!$self->IsScanComplete("domaininfo","$host")){
		  $command=$MainScan->getPath("rpcclient") . " //${host} -U '' -N -c querydominfo > $outputDir/raw/domaininfo.txt 2>>$outputDir/raw/nbenumerrors.log";
			$MainScan->System("$command");

			if (-f "$outputDir/raw/domaininfo.txt" && (my @sidfile=$MainScan->ReadFile("$outputDir/raw/domaininfo.txt"))){
				# Mark scan as complete
				$self->SetScanComplete("domaininfo","$host");
			} else {
				unlink "$outputDir/raw/domaininfo.txt";
			}
		}

		# User enumeration (Null Session)
		if (!$self->IsScanComplete("nullusers","$host")){
			$command=$MainScan->getPath("net") . " rpc user -S ${host} -U ''%'' > $outputDir/netbios/users.txt 2>>$outputDir/raw/nbenumerrors.log";
			my $error=$MainScan->System("$command");

			if (!$error && -f "$outputDir/netbios/users.txt" && (my @ufile=$MainScan->ReadFile("$outputDir/netbios/users.txt"))){
				$MainScan->SetStatValue("$outputDir/hostInfo.txt","NullEnum","True");
				my $message="Host allows user enumeration via Null SMB sessions (" . $#ufile . " users)";
				$MainScan->ConfigError($host, "issue", "GSM-SMB-4", $message);
				$MainScan->SetStatKey($MainScan->ResultsDirectory . "/nullSessions.txt","$host");
				# Mark scan as complete
				$self->SetScanComplete("nullusers","$host");
			} else {
				unlink ("netbios/users.txt");
			}
		}

		# LDAP enumeration with anonymous bind
		if (!$self->IsScanComplete("ldapscan","$host")){
			$command=$MainScan->getPath("net") . " ads lookup -S $host > $outputDir/raw/ads.txt 2>>$outputDir/raw/nbenumerrors.log";
			my $error=$MainScan->System("$command");
			if (-f "$outputDir/raw/ads.txt" && (my @file=$MainScan->ReadFile("$outputDir/raw/ads.txt"))){
				for my $line (@file){
					# Add values to hostInfo.txt
					if (($line =~ /\syes\s/) && ($line =~ /Is a PDC/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","IsPDC","True"); next;}
					if (($line =~ /\syes\s/) && ($line =~ /Is a GC of/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","IsGC","True"); next;}
					if (($line =~ /\syes\s/) && ($line =~ /running a KDC/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","IsKDC","True"); next;}
					if (($line =~ /\syes\s/) && ($line =~ /running time services/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","IsTime","True"); next;}
					if (($line =~ /\syes\s/) && ($line =~ /closest DC/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","IsClosestDC","True"); next;}
					if (($line =~ /\syes\s/) && ($line =~ /Is writable/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","IsWritable","True"); next;}
					if (($line =~ /\syes\s/) && ($line =~ /Is a non-domain/)){$MainScan->SetStatValue("$outputDir/hostInfo.txt","Non-Domain","True"); next;}

					for my $data ("Forest","Domain","Site Name","Domain Controller"){
						if ($line =~ /^${data}:/){
							chomp $line;
							$line =~ s/^${data}:[\s]+//g;
							my $role=$data; $role =~ s/\s//g;
							$MainScan->SetStatValue("$outputDir/hostInfo.txt","$role","$line");
							last;
						}
					}
				}
				# Mark scan as complete
				$self->SetScanComplete("ldapscan","$host");
			} else {
				unlink("$outputDir/raw/ads.txt");
			}
		}

		# SHARES
		if (!$self->IsScanComplete("shares","$host")){
			$command=$MainScan->getPath("net") . " rpc share -l -S ${host} -U ''%'' > $outputDir/netbios/shares.txt 2>>$outputDir/raw/nbenumerrors.log";
			$error=$MainScan->System("$command");
			if (!$error && -f "$outputDir/netbios/shares.txt" && (my @shfile=$MainScan->ReadFile("$outputDir/netbios/shares.txt"))){
					$MainScan->SetStatValue("$outputDir/hostInfo.txt","ExportsShares","True");
					my $message="Host allows share enumeration via Null SMB sessions";
					$MainScan->ConfigError($host, "issue", "GSM-SMB-3", $message);
					$self->SetScanComplete("shares","$host");
			}
		}

			# GROUPS
			if (!$self->IsScanComplete("groups","$host")){
				$command=$MainScan->getPath("net") . " rpc group -l -S ${host} -U ''%'' > $outputDir/netbios/groups.txt 2>>$outputDir/raw/nbenumerrors.log";
				$error=$MainScan->System("$command");
				if (!$error && -f "$outputDir/netbios/groups.txt" && (my @gfile=$MainScan->ReadFile("$outputDir/netbios/groups.txt"))){
					for my $group ("Administrators","Domain Admins","Enterprise Admins","Domain Controllers"){
						$MainScan->System($MainScan->getPath("net") . " rpc group MEMBERS \"${group}\" -l -S ${host} -U ''%'' > \"$outputDir/netbios/members-${group}.txt\" 2>>$outputDir/raw/nbenumerrors.log");
					}
					$self->SetScanComplete("groups","$host");
				}
			}

			# Detailed user info
			if (!$self->IsScanComplete("detailedinfo","$host")){
				my $user_limit=50; my $c=0;
				for my $user ($MainScan->ReadFile("$outputDir/netbios/users.txt")){
					next if (!$user || $user !~ /\S/);
					next if (($user =~ /\(/) || ($user =~ /failed/));
					last if ($c > $user_limit);
					chomp $user;
					next if (-f "$outputDir/netbios/details-${user}.txt");
					my $rid=`rpcclient //$host -U "" -N -c "samlookupnames domain \"$user\"" 2>>$outputDir/raw/nbenumerrors.log`;
					next if ($rid =~ /NT\_STATUS\_/);
					# rpcclient returns RPC error information in STDOUT, not STDERR. Clean this stuff out before processing.
					$rid=~s/^[\s\S]+ $user: (0x\w{2,5})\s[\s\S]+/$1/; $rid=hex $rid;
					$MainScan->SetStatValue("$outputDir/netbios/rids.txt","$user","$rid");
					$MainScan->System($MainScan->getPath("rpcclient") . " //${host} -U '' -N -c \"queryuser $rid\" > \"$outputDir/netbios/details-${user}.txt\" 2>>$outputDir/raw/nbenumerrors.log");
					$c++;
				}
				$self->SetScanComplete("detailedinfo","$host");
			}

			if ($MainScan->GetStatKey("$outputDir/hostInfo.txt","NullEnum")){
				# PASSWORD POLICY
				# Run the command if the flag isn't set and we're enumerating a Windows machine
				if (!$self->IsScanComplete("passpol","$host") && ($MainScan->GetStatValue("$outputDir/hostInfo.txt","SMBType") eq "Windows")){
					$command="echo account show | " . $MainScan->getPath("net") . " rpc shell -S ${host} -U ''%'' >$outputDir/netbios/passwordpolicy.txt 2>>$outputDir/raw/nbenumerrors.log";
					my $error=$MainScan->System("$command");
					if (-f "$outputDir/netbios/passwordpolicy.txt" && (my @ppfile=$MainScan->ReadFile("$outputDir/netbios/passwordpolicy.txt"))){
						my $lockout=0;
						for my $line (@ppfile){
							if ($line =~ /Bad logon attempts:\s+[1-9]{1,}/){
								$lockout=1;
								last;
							}
						}

						if ($lockout == 0){
							$MainScan->SetStatValue("$outputDir/hostInfo.txt","NoLockout","True");
							my $message="Host has no password lockout policy";
							$MainScan->ConfigError($host, "issue", "GSM-SMB-1", $message);
							$MainScan->SetStatKey($MainScan->ResultsDirectory . "/noLockout.txt","$host");
							$hasNoLockout=1;
						}
						# Mark scan as complete
						$self->SetScanComplete("passpol","$host");
					}
				}

			# End of the NULL stuff
		}# else {
		#{ # Now try RID Cycling
		if (!$MainScan->GetStatKey("$outputDir/hostInfo.txt","NullEnum")){
			# No NULL enumeration
			if (!$self->IsScanComplete("ridcycle","$host")){
				my $smbtype=$MainScan->GetStatValue("$outputDir/hostInfo.txt","SMBType");
				if ($smbtype && "$smbtype" =~ /windows/i){
					my $sid=$MainScan->GetStatValue("$outputDir/hostInfo.txt","DomainSID");
					if ($sid){
						my $maxrid=2000;
						for (my $rid=500; $rid<$maxrid; $rid++){
							my $uname=`rpcclient //$host -U '' -N -c "lookupsids ${sid}-${rid}" 2>>$outputDir/raw/nbenumerrors.log`;
							chomp $uname;
							next if (($uname =~ /NT_STATUS_NONE_MAPPED/) || ($uname =~ /\*unknown\*/));
							$uname=~s/^\S+\s([\S\s]+)\([\s\S]+/$1/;
							$MainScan->SetStatValue("$outputDir/netbios/ridcycled.txt","$uname","$rid");
						}
						$ridcycledOK=1;
					}
				} else {
					my $sid=$MainScan->GetStatValue("$outputDir/hostInfo.txt","DomainSID");
					if ($sid){
						my $maxrid=100;
						for (my $rid=0; $rid<$maxrid; $rid++){
							my $uname=`rpcclient //$host -U '' -N -c "lookupsids ${sid}-${rid}" 2>>$outputDir/raw/nbenumerrors.log`;
							chomp $uname;
							next if (($uname =~ /NT_STATUS_NONE_MAPPED/) || ($uname =~ /\*unknown\*/));

							$uname=~s/^\S+\s([\S\s]+)\([\s\S]+/$1/;
							$MainScan->SetStatValue("$outputDir/netbios/ridcycled.txt","$uname","$rid");
						}
						for my $rid (500,501){
							my $uname=`rpcclient //$host -U '' -N -c "lookupsids ${sid}-${rid}" 2>>$outputDir/raw/nbenumerrors.log`;
							chomp $uname;
							next if (($uname =~ /NT_STATUS_NONE_MAPPED/) || ($uname =~ /\*unknown\*/));
							$uname=~s/^\S+\s([\S\s]+)\([\s\S]+/$1/;
							$MainScan->SetStatValue("$outputDir/netbios/ridcycled.txt","$uname","$rid");
						}
						$maxrid=1100;
						for (my $rid=1000; $rid<$maxrid; $rid++){
							my $uname=`rpcclient //$host -U '' -N -c "lookupsids ${sid}-${rid}" 2>>$outputDir/raw/nbenumerrors.log`;
							chomp $uname;
							next if (($uname =~ /NT_STATUS_NONE_MAPPED/) || ($uname =~ /\*unknown\*/));
							$uname=~s/^\S+\s([\S\s]+)\([\s\S]+/$1/;
							$MainScan->SetStatValue("$outputDir/netbios/ridcycled.txt","$uname","$rid");
						}
						$ridcycledOK=1;
					}
				}
				$self->SetScanComplete("ridcycle","$host");
			}

			if ($ridcycledOK && !$self->IsScanComplete("ridcyclesort","$host") && $self->IsScanComplete("ridcycle","$host")){
				my $validUsers=0;
				for my $uname ($MainScan->ReadFile("$outputDir/netbios/ridcycled.txt")){
					chomp $uname;
					last if ("$uname" =~ /NT_STATUS_ACCESS_DENIED/);
					next if ("$uname" =~ /NT_STATUS/);
					my $sid=$uname; $sid =~ s/[\S\s]+  (\d+)$/$1/;
					$uname =~ s/\s+\d+$//;
					$uname =~ s/Unix User\\//;
					next if ($uname =~ /\S+\\unix_user\./);
					next if ($uname =~ /\S+\\unix_group\./);
					next if ("$uname" eq "$sid");
					$validUsers++;
					$MainScan->SetListItem("$outputDir/netbios/users.txt","$uname");
				}
				if ($validUsers){
					my $message="Host allows user enumeration via RID Cycling";
					$MainScan->ConfigError($host, "issue", "GSM-SMB-5", $message);
				}
				$self->SetScanComplete("ridcyclesort","$host");
			}
		}

		# Finally, try guessing trivial passwords if there is no lockout
		if ($hasNoLockout && !$self->IsScanComplete("passwordGuess","$host")){
			my $medusa=$MainScan->getPath("medusa");
			my $output="$outputDir/raw/medusa.txt";
			if ($medusa){
				if (-f "$outputDir/netbios/users.txt"){
					$MainScan->System("$medusa -h $host -ens -U \"$outputDir/netbios/users.txt\" -L -M smbnt > $output 2>&1");
					for my $line ($MainScan->ReadFile($output)){
						next if ($line !~ /ACCOUNT FOUND/);
						if ($line =~ /\s\[SUCCESS\]\s/){
							my ($user,$password)=parseMedusa($line);
							#$MainScan->StoreGuessedPassword($target,"comp","SMB",$user,"\"$password\"","GSM-SMB-6","Logged in as $user password \"$password\"");
							# Instead of storing it a in plain text file, use the credential manager
							$credentialManager->addCredential(
								'type' => 'smb',
								'user' => "$user",
								'pass' => "$password",
								'system' => "$host",
								'comment' => uc($protocol) . "/$port (GSM:$name)"
							);
							$MainScan->RecordVulnerability($target, "GSM-SMB-6", "Logged in as $user password \"$password\"");
							next;
						}
						if ($line =~ /STATUS_ACCOUNT_DISABLED/){
							my ($user,$password)=parseMedusa($line);
							$MainScan->SetListItem("$outputDir/hostInfo.txt","DisabledAccount: $user");
							$credentialManager->addCredential(
								'type' => 'smb',
								'user' => "$user",
								'pass' => "$password",
								'system' => "$host",
								'privilege' => 'low',
								'tag' => 'locked',
								'comment' => uc($protocol) . "/$port (GSM:$name)"
							);
							#print "$user: account is disabled.\n";
							next;
						}
					}
				}
				$self->SetScanComplete("passwordGuess","$host");
			}
		}

		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>
		#>>>>>>>>>>>>> End of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>

		# Don't modify anything below this line.
		$self->SetScanComplete("$name","$target");
	} else {
		$Log->Status ("GSM $name (thread $threadID) -> $socket already scanned - skipping\n","LOGONLY");
	}
	$Log->Status ("GSM $name (thread $threadID) -> $socket FINISHED scanning\n");
	return 0;
}

sub parseMedusa {
	my $line=shift();
	my ($user,$password)=("","");
	my ($junk,$data)=split ("User: ",$line);
	($user,$data)=split (" Password: ",$data);
	($password,$junk)=split (" \\[\\S",$data);
	return ($user,$password);
}

sub SingleScan {
	my $self=shift;
	return $$self{'OnePerHost'};
}

sub Name {
	my $self=shift();
	return $$self{'Name'};
}
sub Cost {
	my $self=shift();
	return $$self{'Cost'};
}
sub Enabled {
	my $self=shift();
	return $$self{'Enabled'};
}
sub Watching {
	my $self=shift();
	return @{$$self{'WatchFiles'}};
}

sub TargetSpec {
	my $self=shift();
	my $targetSpec=shift();
	if (!defined($targetSpec)){
		return $$self{'TargetSpec'};
	} else {
		$$self{'TargetSpec'}=$targetSpec;
	}
}

sub IsScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	return $MainScan->GetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
}

sub SetScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	$MainScan->SetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
	return 1;
}

sub SetScanInComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	if ($MainScan->DelStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName)){
		return 1;
	} else {
		return 0;
	}
}
sub MaxInstances {
	my $self=shift();
	return $$self{'MaxInstances'};
}
sub ConflictsWith {
	my $self=shift();
	return @{$$self{'ConflictingModules'}};
}
1;
