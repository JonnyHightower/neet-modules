##########################################################################
#
#    Neet: Network discovery, enumeration and security assessment tool
#    Copyright (C) 2008-2014 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################

package FTP;

sub new {
	my $pkg=shift();
	my %struct;
	$struct{'Name'}=$pkg;
	$struct{'MainScan'}=shift();
	my $self=\%struct;
	bless $self, $pkg;

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>
	# Customise these parameters
	$struct{'Enabled'}=1;
	$struct{'Protocol'}='tcp';
	@{$struct{'WatchFiles'}}=("ftp.txt");
	$struct{'Cost'}=5;
	$struct{'OnePerHost'}=0;
	$struct{'MaxInstances'}=0;
	@{$struct{'ConflictingModules'}}=('');

	# End parameter customisation
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>

	return $self;
}

sub activate {
	my $self=shift();
	my $MainScan=$$self{'MainScan'};
	my $target=shift();
	my $file=shift();
	my $threadID=Neet::threads->tid;
	my $cost=$$self{'Cost'};
	my $name=$$self{'Name'};
	my $Config=$MainScan->Config;
	my $Log=$MainScan->Log;
	my ($host,$protport) = split (":", $target);
	my $socket=$host;
	my ($protocol,$port);
	my $outputDir=$MainScan->ResultsDirectory . "/$host";
	my $resourceDir=$MainScan->ResourceDirectory . "/modules/$name";
	my ($targetType,$interface)=$MainScan->IsHostLocal($host);
	($protocol,$port) = split ("/", $protport) if ($protport);
	$socket .= ":$port" if ($port);
	return 0 if ($protocol && $$self{'Protocol'} && ("$protocol" ne "$$self{'Protocol'}"));
	# Don't scan if the host is cancelled
	if ($MainScan->IsHostCancelled($host)){
		$Log->Status ("$name (thread $threadID) -> scans against $target CANCELLED\n","LOGONLY");
		return 0;
	}
	$0 = "Neet - GSM: $name thread $threadID testing $target";

	if (!$self->IsScanComplete("$name","$target")){
		# Tell the user what we're doing
		$Log->Status ("GSM $name (thread $threadID) -> Scanning $socket ($targetType $interface)\n");

		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>
		#>>>>>>>>>>>>> Beginning of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>

		use IO::Socket::INET;

		# Set up the signal handler for exiting cleanly
		$SIG{'USR1'}=sub{
			$self->SetScanInComplete("$name","$target");
			Neet::threads->exit();
		};

		my @testUsers=("anonymous","ftp","guest");
		my @testPass=('USER@test.com',"USER","anonymous");
		my $login=0; my ($code,$u,$p,$ttl);
		users: for my $user (@testUsers){
			for my $P (@testPass){
				my $pass=$P;
				$pass =~ s/USER/$user/g;
				my $sock=IO::Socket::INET->new('PeerAddr' => $host, 'PeerPort' => $port, 'Proto' => 'tcp');
				if ($sock){
					$code=""; $ttl=0;
					until ($code || ($ttl == 10)){
						my $line=<$sock>;
						$ttl++;
						if ($line && $line =~ /^\d{3}\s/){
							$code = substr($line,0,3);
							last;
						}
					}
					print $sock "USER $user\r\n";
					$code=""; $ttl=0;
					until ($code || ($ttl==10)){
						my $line=<$sock>;
						$ttl++;
						if ($line && $line =~ /^\d{3}\s/){
							$code = substr($line,0,3);
							last;
						}
					}

					if ($code =~ /^3/){
						# Wants a password
						print $sock "PASS $pass\r\n";
						$code=""; $ttl=0;
						until ($code || ($ttl==10)){
							my $line=<$sock>;
							$ttl++;
							if ($line && $line =~ /^\d{3}\s/){
								$code = substr($line,0,3);
								last;
							}
						}

						if ($code =~ /^2/){
							$login=1; $u=$user; $p=$pass;
							print $sock "QUIT\r\n";
							last users;
						}
					}
					print $sock "QUIT\r\n";
					close $sock;
				}
			}
		}

		if ($login){
			my $message="FTP Host supports anonymous login with $u:$p";
			$MainScan->StoreGuessedPassword($target,"vuln", "FTP","$u","$p","GSM-FTP-1",$message);
		}

		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>
		#>>>>>>>>>>>>> End of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>

		# Don't modify anything below this line.
		$self->SetScanComplete("$name","$target");
	} else {
		$Log->Status ("GSM $name (thread $threadID) -> $socket already scanned - skipping\n","LOGONLY");
	}
	$Log->Status ("GSM $name (thread $threadID) -> $socket FINISHED Scanning\n");
	return 0;
}

sub SingleScan {
	my $self=shift;
	return $$self{'OnePerHost'};
}

sub Name {
	my $self=shift();
	return $$self{'Name'};
}
sub Cost {
	my $self=shift();
	return $$self{'Cost'};
}
sub Enabled {
	my $self=shift();
	return $$self{'Enabled'};
}
sub Watching {
	my $self=shift();
	return @{$$self{'WatchFiles'}};
}

sub TargetSpec {
	my $self=shift();
	my $targetSpec=shift();
	if (!defined($targetSpec)){
		return $$self{'TargetSpec'};
	} else {
		$$self{'TargetSpec'}=$targetSpec;
	}
}

sub IsScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	return $MainScan->GetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
}

sub SetScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	$MainScan->SetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
	return 1;
}

sub SetScanInComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	if ($MainScan->DelStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName)){
		return 1;
	} else {
		return 0;
	}
}
sub MaxInstances {
	my $self=shift();
	return $$self{'MaxInstances'};
}
sub ConflictsWith {
	my $self=shift();
	return @{$$self{'ConflictingModules'}};
}

1;
