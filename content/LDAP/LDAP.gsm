##########################################################################
#
#    Neet: Network discovery, enumeration and security assessment tool
#    Copyright (C) 2008-2014 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################

# This Template is provided for use as a basis for your own modules.

# In case you haven't guessed, this is written in PERL. The code is run in a 'strict' environment, so
# make sure to use "my" to limit the scope of your variables, or the module will fail to load.

# The only code areas you should modify are:

# * The "Customise these parameters" area in the "new" subroutine
# * The code for the actual test in the "activate" subroutine, after "Beginning of module-specific code"
#   and before "End of module-specific code".

# The rest of the code should remain unmodified. You may wish to remove a lot of these example comments
# for the sake of readability of your code.
package LDAP;

sub new {
	my $pkg=shift();
	my %struct;
	$struct{'Name'}=$pkg;
	$struct{'MainScan'}=shift();
	my $self=\%struct;
	bless $self, $pkg;

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>
	# Customise these parameters

	# If $struct{'Enabled'} is 0, the module won't be loaded, and therefore won't test anything.
	# As this is a template module, we don't really want it to run.
	$struct{'Enabled'}=1;

	# If your module only tests a UDP or TCP service, put a lower-case protocol name in $struct{'Protocol'}.
	$struct{'Protocol'}='tcp';

	# @{$struct{'WatchFiles'}} is an array of files to watch in the "services" directory.
	# You can specify more than one. If any of them change, your module will be activated with the new services.
	@{$struct{'WatchFiles'}}=("ldap.txt","globalcatalog.txt");

	# Cost is used to determine how resource-intensive your module is. As modules are started, their cost is added
	# up, and once the budget is reached, no more modules will start until some finish and release more budget.
	# As a rule, 10 is a lightweight test, and 100 is something intensive like nikto or an SMB brute-force.
	$struct{'Cost'}=40;

	# $struct{'OnePerHost'} should be 0 if more than one instance of this service is to be tested per host. Most
	# modules will be set this way. If it is set to 1, then your module will only be told about the host IP, and
	# not a protocol or port. Services such as SMB are typically need a setting of 1, otherwise all the SMB tests
	# will be performed on both 139 and 445.
	$struct{'OnePerHost'}=0;

	# $struct{'MaxInstances'} determines the maximum number of instances of this service that are allowed to run
	# simultaneously, even if there is room in the budget to run more. This is to prevent some modules hogging
	# all the resources. A value of 0 means that there is no limit (apart from the budget constraints).
	$struct{'MaxInstances'}=4;

	#	$struct{'ConflictingModules'} is an array containing the names (without file extensions) of modules which
	# should prevent this one from running.
	@{$struct{'ConflictingModules'}}=('');

	# End parameter customisation
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>

	return $self;
}

sub activate {
	# This is the subroutine that contains the actual code. 
  # First, some code which will be common to all modules - setting up the environment
	my $self=shift();
	my $MainScan=$$self{'MainScan'};
	my $target=shift();
	my $file=shift();
	my $threadID=Neet::threads->tid;
	my $cost=$$self{'Cost'};
	my $name=$$self{'Name'};
	my $Config=$MainScan->Config;
	my $Log=$MainScan->Log;
	my ($host,$protport) = split (":", $target);
	my $socket=$host;
	my ($protocol,$port);
	my $BasePrefix=$Config->GetVal("BasePrefix");
	my $outputDir=$MainScan->ResultsDirectory . "/$host";
	my $resourceDir=$MainScan->ResourceDirectory . "/modules/$name";
	my ($targetType,$interface)=$MainScan->IsHostLocal($host);
	($protocol,$port) = split ("/", $protport) if ($protport);
	$socket .= ":$port" if ($port);
	return 0 if ($protocol && $$self{'Protocol'} && ("$protocol" ne "$$self{'Protocol'}"));
	# Don't scan if the host is cancelled
	if ($MainScan->IsHostCancelled($host)){
		$Log->Status ("$name (thread $threadID) -> scans against $target CANCELLED\n","LOGONLY");
		return 0;
	}
	$0 = "Neet - GSM: $name thread $threadID testing $target";

	if (!$self->IsScanComplete("$name","$target")){
		# Tell the user what we're doing
		$Log->Status ("GSM $name (thread $threadID) -> Scanning $socket ($targetType $interface)\n");

		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>
		#>>>>>>>>>>>>> Beginning of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>

		# These are the variables you can use in your code:
		# $target - the raw target specification as it is supplied to this subroutine by the scheduler.
		#           Unless you want to process this for any particular reason, you're better off using the
    #           $host, $protocol, $port or $socket variables below.
		# $file - the filename from which the target was selected. This is useful when your module is monitoring
		# 					multiple files. You can use this to alter the behaviour of your module accordingly.
		# $host - the IP address of the target
		# $port - the port on which the service is listening (not set for "OnePerHost" modules)
		# $protocol - the protocol on which the service is listening (not set for "OnePerHost" modules)
		# $socket - same as $host, unless $port is set, in which case it is set to "$host:$port".
		# $name - the name of this module
		# $cost - the cost of this module
		# $threadID - the Perl ithread ID for this thread
		# $outputDir - the full absolute path to the directory of results for this $host
		# $resourceDir - the full absolute path to the directory of resources for this module.
		#                This is normally /usr/local/share/neet/resources/modules/$name, so for this
		#                module, $resourceDir would be /usr/local/share/neet/resources/modules/Example
		# $BasePrefix - the full absolute path to the neet installation - usuall /usr/local/share/neet

		# These are the objects you can access
		# $self - This module
		# $MainScan - MainScan object, which provides most of neet's method calls.
		# $Config - The interface to the configuration file
		# $Log - The interface to the logging and screen printing mechanism

		# The API for recording issues is as follows:
		# RecordIssue(target, label, text)
		# RecordVulnerability(target, label, text)
		#	RecordCompromise(target, label, text)
		#	StoreGuessedPassword(target, level, service, username, password, label, text)
		# MissingPatch(target, level, service, patch, label, text)
		#	ConfigError(target, level, label, text)

		# Include any Perl modules you may require

		# Set up the signal handler for exiting cleanly
		$SIG{'USR1'}=sub{
			$self->SetScanInComplete("$name","$target");
			Neet::threads->exit();
			$MainScan->System("killall ldapsearch");
		};

		# And now the code for the actual test:

		# <<< CODE GOES HERE >>>

		# Null Bind to Base DN
		my $namingContext;
		my $output="${outputDir}/raw/ldapNull-${port}.txt";
		my $rc=$MainScan->System($MainScan->getPath("ldapsearch") . " -h $host -p $port -x -D NULL > $output 2>&1");

		$output="${outputDir}/raw/ldapBase-${port}.txt";
		$MainScan->System($MainScan->getPath("ldapsearch") . " -h $host -p $port -x -s base > $output 2>&1");
		my $scheme="ldap";
		$scheme="ldaps" if ($port == 636);

		my $F;
		if (!$rc){
			my $lines; my $trigger=10; # Number of lines that constitute real output
			my $stopLookingForNamingContexts=0;
			if (open($F,"$output")){
				until (eof $F){
					my $line=readline(*$F);
					if (!$stopLookingForNamingContexts && $line =~ /^namingContexts: DC=/){
						$stopLookingForNamingContexts=1;
						my ($junk,$data)=split (" DC=", $line, 2);
						chomp $data;
						$namingContext="DC=" . $data;
					}
					$lines++;
				}
				close $F;
			}
			if ($lines >= $trigger){
				$MainScan->ConfigError($target,"issue","GSM-LDAP-1","LDAP server allowed anonymous access to a NULL base");
				$MainScan->System("mv $output $outputDir/");
			}
		}

		if ($namingContext){
			$MainScan->SetListItem("$outputDir/hostInfo.txt","LDAPNamingContext: $namingContext");
		}

		# Try default credentials. Add extra creds as array elements of the form "username:password"
		my @credentials = ("orcladmin:welcome","cn=orcladmin:welcome");
		my @success;
		# Iterate over the credentials and test them
		my $i=0;
		for my $credential (@credentials){
			my ($user,$pass) = split (":", $credential, 2);
			# Blank passwods won't work
			next if (!$pass);
			# Test the credentials first
			my $output="${outputDir}/raw/ldapCredTest-${i}-${port}.txt";
			$i++;
			my $rc=$MainScan->System($MainScan->getPath("ldapsearch") . " -LLL -H ${scheme}://${host}:$port -s base -D \'$user\' -w \'$pass\' > $output 2>&1");
			if ($rc > 1){
				# Authentication failure
				next;
			}
			if (open($F,"$output")){
				until (eof $F){
					my $line=readline(*$F);
					if (!$stopLookingForNamingContexts && $line =~ /^namingContexts: DC=/){
						$stopLookingForNamingContexts=1;
						my ($junk,$data)=split (" DC=", $line, 2);
						chomp $data;
						$namingContext="DC=" . $data;
					}
				}
				close $F;
			}
			my $message="LDAP server found with default credentials.";
			$MainScan->StoreGuessedPassword($target, "vuln", "LDAP", "$user", "$pass", "GSM-LDAP-2", $message);
			push @success, $credential;
		}

		if ($namingContext){
			$MainScan->SetListItem("$outputDir/hostInfo.txt","LDAPNamingContext: $namingContext");
		}

		# Use any credentials that worked to enumerate what we can from the LDAP
		for my $credential (@success){
			last if (!$namingContext);
			my ($user,$pass) = split (":", $credential, 2);
			my $namingContextFileName=$namingContext;
			$namingContextFileName =~ s/dc=/\./gi;
			$namingContextFileName =~ s/,//g;
			$namingContextFileName =~ s/^.//g;

			# You can set up multiple queries which will be run sequentially against the LDAP
			# with the credentials found.
			my @queries = ("computers:objectclass=computer");

			for my $querydata (@queries){
				my ($file,$query) = split (":", $querydata, 2);
				my $output=$MainScan->ResultsDirectory . "/ldapQuery-$namingContextFileName-${file}.txt";
				# Don't run this query again if it already exists IN THIS NAMING CONTEXT
				last if (-f $output);
				my $rc=$MainScan->System($MainScan->getPath("ldapsearch") . " -LLL -H ${scheme}://${host}:$port -b \'$namingContext\' -D \'$user\' -w \'$pass\' \'($query)\' > $output 2>&1");
				if ($rc > 1){
					# Authentication failure
					next;
				}
			}
			# Stop here - we only want to try this with a single credential
			last;
		}
		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>
		#>>>>>>>>>>>>> End of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>

		# Don't modify anything below this line.
		$self->SetScanComplete("$name","$target");
	} else {
		$Log->Status ("GSM $name (thread $threadID) -> $socket already scanned - skipping\n","LOGONLY");
	}
	$Log->Status ("GSM $name (thread $threadID) -> $socket FINISHED scanning\n");
	return 0;
}

sub SingleScan {
	my $self=shift;
	return $$self{'OnePerHost'};
}

sub Name {
	my $self=shift();
	return $$self{'Name'};
}
sub Cost {
	my $self=shift();
	return $$self{'Cost'};
}
sub Enabled {
	my $self=shift();
	return $$self{'Enabled'};
}
sub Watching {
	my $self=shift();
	return @{$$self{'WatchFiles'}};
}

sub TargetSpec {
	my $self=shift();
	my $targetSpec=shift();
	if (!defined($targetSpec)){
		return $$self{'TargetSpec'};
	} else {
		$$self{'TargetSpec'}=$targetSpec;
	}
}

sub IsScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	return $MainScan->GetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
}

sub SetScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	$MainScan->SetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
	return 1;
}

sub SetScanInComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	if ($MainScan->DelStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName)){
		return 1;
	} else {
		return 0;
	}
}
sub MaxInstances {
	my $self=shift();
	return $$self{'MaxInstances'};
}
sub ConflictsWith {
	my $self=shift();
	return @{$$self{'ConflictingModules'}};
}

1;
