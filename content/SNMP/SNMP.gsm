##########################################################################
#
#    Neet: Network discovery, enumeration and security assessment tool
#    Copyright (C) 2008-2014 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################

# This Template is provided for use as a basis for your own modules.

# In case you haven't guessed, this is written in PERL. The code is run in a 'strict' environment, so
# make sure to use "my" to limit the scope of your variables, or the module will fail to load.

# The only code areas you should modify are:

# * The "Customise these parameters" area in the "new" subroutine
# * The code for the actual test in the "activate" subroutine, after "Beginning of module-specific code"
#   and before "End of module-specific code".

# The rest of the code should remain unmodified. You may wish to remove a lot of these example comments
# for the sake of readability of your code.
package SNMP;

sub new {
	my $pkg=shift();
	my %struct;
	$struct{'Name'}=$pkg;
	$struct{'MainScan'}=shift();
	my $self=\%struct;
	bless $self, $pkg;

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>
	# Customise these parameters

	# If $struct{'Enabled'} is 0, the module won't be loaded, and therefore won't test anything.
	# As this is a template module, we don't really want it to run.
	$struct{'Enabled'}=1;

	# If your module only tests a UDP or TCP service, put a lower-case protocol name in $struct{'Protocol'}.
	$struct{'Protocol'}='udp';

	# @{$struct{'WatchFiles'}} is an array of files to watch in the "services" directory.
	# You can specify more than one. If any of them change, your module will be activated with the new services.
	@{$struct{'WatchFiles'}}=("snmp.txt");

	# Cost is used to determine how resource-intensive your module is. As modules are started, their cost is added
	# up, and once the budget is reached, no more modules will start until some finish and release more budget.
	# As a rule, 10 is a lightweight test, and 100 is something intensive like nikto or an SMB brute-force.
	$struct{'Cost'}=20;

	# $struct{'OnePerHost'} should be 0 if more than one instance of this service is to be tested per host. Most
	# modules will be set this way. If it is set to 1, then your module will only be told about the host IP, and
	# not a protocol or port. Services such as SMB are typically need a setting of 1, otherwise all the SMB tests
	# will be performed on both 139 and 445.
	$struct{'OnePerHost'}=0;

	# $struct{'MaxInstances'} determines the maximum number of instances of this service that are allowed to run
	# simultaneously, even if there is room in the budget to run more. This is to prevent some modules hogging
	# all the resources. A value of 0 means that there is no limit (apart from the budget constraints).
	$struct{'MaxInstances'}=4;

	#	$struct{'ConflictingModules'} is an array containing the names (without file extensions) of modules which
	# should prevent this one from running.
	@{$struct{'ConflictingModules'}}=('');

	# End parameter customisation
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>

	return $self;
}

sub activate {
	# This is the subroutine that contains the actual code. 
  # First, some code which will be common to all modules - setting up the environment
	my $self=shift();
	my $MainScan=$$self{'MainScan'};
	my $target=shift();
	my $file=shift();
	my $threadID=Neet::threads->tid;
	my $cost=$$self{'Cost'};
	my $name=$$self{'Name'};
	my $Config=$MainScan->Config;
	my $Log=$MainScan->Log;
	my ($host,$protport) = split (":", $target);
	my $socket=$host;
	my ($protocol,$port);
	my $credentialManager=$MainScan->CredentialManager;
	my $outputDir=$MainScan->ResultsDirectory . "/$host";
	my $resourceDir=$MainScan->ResourceDirectory . "/modules/$name";
	my ($targetType,$interface)=$MainScan->IsHostLocal($host);
	($protocol,$port) = split ("/", $protport) if ($protport);
	$socket .= ":$port" if ($port);

	return 0 if ($protocol && $$self{'Protocol'} && ("$protocol" ne "$$self{'Protocol'}"));
	# Don't scan if the host is cancelled
	if ($MainScan->IsHostCancelled($host)){
		$Log->Status ("$name (thread $threadID) -> scans against $target CANCELLED\n","LOGONLY");
		return 0;
	}
	$0 = "Neet - GSM: $name thread $threadID testing $target";

	if (!$self->IsScanComplete("$name","$target")){
		# Tell the user what we're doing
		$Log->Status ("GSM $name (thread $threadID) -> Scanning $socket ($targetType $interface)\n");

		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>
		#>>>>>>>>>>>>> Beginning of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>

		# These are the variables you can use in your code:
		# $target - the raw target specification as it is supplied to this subroutine by the scheduler.
		#           Unless you want to process this for any particular reason, you're better off using the
    #           $host, $protocol, $port or $socket variables below.
		# $file - the filename from which the target was selected. This is useful when your module is monitoring
		# 					multiple files. You can use this to alter the behaviour of your module accordingly.
		# $host - the IP address of the target
		# $port - the port on which the service is listening (not set for "OnePerHost" modules)
		# $protocol - the protocol on which the service is listening (not set for "OnePerHost" modules)
		# $socket - same as $host, unless $port is set, in which case it is set to "$host:$port".
		# $name - the name of this module
		# $cost - the cost of this module
		# $threadID - the Perl ithread ID for this thread
		# $outputDir - the full absolute path to the directory of results for this $host
		# $resourceDir - the full absolute path to the directory of resources for this module.
		#                This is normally /usr/local/share/neet/resources/modules/$name, so for this
		#                module, $resourceDir would be /usr/local/share/neet/resources/modules/Example

		# These are the objects you can access
		# $self - This module
		# $MainScan - MainScan object, which provides most of neet's method calls.
		# $Config - The interface to the configuration file
		# $Log - The interface to the logging and screen printing mechanism

		# The API for recording issues is as follows:
		# RecordIssue(target, label, text)
		# RecordVulnerability(target, label, text)
		#	RecordCompromise(target, label, text)
		#	StoreGuessedPassword(target, level, service, username, password, label, text)
		# MissingPatch(target, level, service, patch, label, text)
		#	ConfigError(target, level, label, text)

		# Include any Perl modules you may require

		# Set up the signal handler for exiting cleanly
		$SIG{'USR1'}=sub{
			$self->SetScanInComplete("$name","$target");
			Neet::threads->exit();
		};

		my (@read,@write); $#read=-1; $#write=-1;
		my $StringsFile="${resourceDir}/defaultStrings";
		my $Retries=$Config->GetVal("Speeds.$targetType.snmpxet.numretries." . $MainScan->Speed);
		my $RetryInterval=$Config->GetVal("Speeds.$targetType.snmpxet.retryinterval." . $MainScan->Speed);
		my $Version=$Config->GetVal("Version.SNMP");
		my @OIDS=split " ", $Config->GetVal("OID.SNMP");
		my $READ_OID; #=$Config->GetVal("OID.SNMP");
		my $READ_ANY=0; my $WROTE_ANY=0;

		if (open(SNMP,"$StringsFile")){
			my @strings=<SNMP>;
			close SNMP;
			for my $string (@strings){
			 for my $OID (@OIDS){
			  last if ($READ_ANY > 4);
				chomp $string;
				my $command=$MainScan->getPath("snmpget") . " -v \"$Version\" -r \"$Retries\" -t \"$RetryInterval\" -c \"$string\" \"${protocol}:${host}:$port\" \"$OID\"";
				$error=$MainScan->System("$command > $outputDir/raw/SNMP.tmp 2>/dev/null"); # nolog?
				if (!$error){
					# We read the string
					$READ_ANY++;
					$READ_OID=$OID;
					if (open(FH,"$outputDir/raw/SNMP.tmp")){
						my $value=<FH>;
						close FH;
						if ($value){
							chomp $value;
							push @read, "$string\t$value";
						}
						# Now get the MIB
						if (!$self->IsScanComplete($name . "getmib",$target) && $value){
							my $Retries=$Config->GetVal("Speeds.$targetType.snmpwalk.numretries." . $MainScan->Speed);
							my $RetryInterval=$Config->GetVal("Speeds.$targetType.snmpwalk.retryinterval." . $MainScan->Speed);
							my $Version=$Config->GetVal("Version.SNMP");
							my $command=$MainScan->getPath("snmpwalk") . " -v \"$Version\" -r \"$Retries\" -t \"$RetryInterval\" -Cc -c \"$string\" -Oq \"${protocol}:${host}:$port\"";
							my $error=$MainScan->System("$command > $outputDir/snmpMIB-${port}.txt 2>/dev/null");
							if ($error){
								$Log->Error("GSM thread $threadID ($name -> $target): Couldn't get entire MIB - error code $error\n");
							} else {
								#$Log->Vuln ("GSM thread $threadID ($name -> $target): -> GOT MIB using string \"$string\"\n");
								my $message="Host allowed the SNMP MIB to be read using the community string \"$string\"";
								#$MainScan->StoreGuessedPassword($target,"vuln", "SNMP","nouser","$string","GSM-SNMP-RD",$message);
								# Instead of storing it in a flat file, use the credential manager
								$credentialManager->addCredential(
									'type' => 'snmp',
									'pass' => "$string",
									'system' => "$host",
									'privilege' => 'low',
									'comment' => uc($protocol) . "/$port (GSM:$name)"
								);
								$MainScan->RecordVulnerability($target, "GSM-SNMP-RD",$message);

								$self->SetScanComplete($name . "getmib",$target);
								$MainScan->SetStatValue($MainScan->ResultsDirectory . "/readSNMP.txt",$target,$string);
							}
							if (-f "$outputDir/snmpMIB-${port}.txt"){
								my $hw=$MainScan->GetStatValue("$outputDir/snmpMIB-${port}.txt","SNMPv2-MIB::sysDescr.0");
								my $aix=$MainScan->GetStatValue("$outputDir/snmpMIB-${port}.txt","Base Operating System Runtime AIX version:");

								if ($hw){
									if ($hw =~ /\sia64\s/){
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","Architecture","64-bit Itanium");
									} elsif ($hw =~ /\sx64\s/){
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","Architecture","64-bit");
									} elsif ($hw =~ /\sx86\s/){
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","Architecture","32-bit x86");
									} elsif ($hw =~ /IBM PowerPC CHRP Computer/){
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","Architecture","IBM PowerPC CHRP");
									} elsif ($hw =~ /Fibre Channel Switch/){
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","Architecture","Fibre Channel Switch");
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","OS","Fibre Channel Switch");
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","OSType","Fibre Channel Switch");
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","OSFamily","Fibre Channel Switch");
										$MainScan->DelStatKey("unix.txt",$host);
										$MainScan->SetStatValue("switch.txt",$host,"Fibre Channel");
									}
								}
								if ($aix){
									my ($junk,$version) = split "version: ", $aix;
									$MainScan->SetStatValue("$outputDir/hostInfo.txt","OSType","unix");
									$MainScan->SetStatValue("$outputDir/hostInfo.txt","OSFamily","AIX");
									if ($version){
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","OS","AIX $version");
										$MainScan->SetStatValue("$outputDir/hostInfo.txt","OSVersion","$version");
										$MainScan->SetStatValue("unix.txt",$host,"AIX $version");
									} else {
										$MainScan->SetStatValue("unix.txt",$host,"AIX");
									}
								}
							}
						} else {
							$Log->Status("GSM thread $threadID ($name -> $target): Already scanned - skipping\n");
						}
					}
				}
			 } # OID
			} # String

			# For the strings we got as READ, try writing
			for my $data (@read){
				next if (!$data);
				my $OID=$READ_OID;
				my ($string,$value)=split "\\t", $data;
				$value =~ s/[\s\S]+ = \w+: ([\s\S]+)/$1/; $value =~ s/[\r\n]//g;
				my $command=$MainScan->getPath("snmpset") . " -v \"$Version\" -r \"$Retries\" -t \"$RetryInterval\" -c \"$string\" \"${protocol}:${host}:$port\" \"$OID\" s MODIFIED";
				$error=$MainScan->System("$command > $outputDir/raw/SNMP.tmp 2>/dev/null"); # nolog?
				if (!$error){
					# We modified the string.
					$WROTE_ANY=1;
					$MainScan->SetStatValue($MainScan->ResultsDirectory . "/writeSNMP.txt",$target,$string);
					$MainScan->ConfigError($target, "vuln", "GSM-SNMP-WR", "Wrote SNMP MIB using string \"$string\"");
					push @write, $string;
					$command=$MainScan->getPath("snmpset") . " -v \"$Version\" -r \"$Retries\" -t \"$RetryInterval\" -c \"$string\" \"${protocol}:${host}:$port\" \"$OID\" s \"$value\"";
					$error=$MainScan->System("$command > $outputDir/raw/SNMP.tmp 2>/dev/null"); # nolog?
					if ($error){
						$Log->Warn("GSM thread $threadID ($name -> $target): Failed to reset $OID to \"$value\" (Using community string \"$string\")");
					} else {
						$Log->OK("GSM thread $threadID ($name -> $target): Succesfully reset $OID to original value \"$value\" (Using community string \"$string\")");
					}
				}
			}
			unlink "$outputDir/raw/SNMP.tmp";
		} else {
			$Log->Warn ("GSM thread $threadID ($name -> $target): Couldn't open $StringsFile to read SNMP strings\n");
		}

		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>
		#>>>>>>>>>>>>> End of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>

		# Don't modify anything below this line.
		$self->SetScanComplete("$name","$target");
	} else {
		$Log->Status ("GSM $name (thread $threadID) -> $socket already scanned - skipping\n","LOGONLY");
	}
	$Log->Status ("GSM $name (thread $threadID) -> $socket FINISHED scanning\n");
	return 0;
}

sub SingleScan {
	my $self=shift;
	return $$self{'OnePerHost'};
}

sub Name {
	my $self=shift();
	return $$self{'Name'};
}
sub Cost {
	my $self=shift();
	return $$self{'Cost'};
}
sub Enabled {
	my $self=shift();
	return $$self{'Enabled'};
}
sub Watching {
	my $self=shift();
	return @{$$self{'WatchFiles'}};
}

sub TargetSpec {
	my $self=shift();
	my $targetSpec=shift();
	if (!defined($targetSpec)){
		return $$self{'TargetSpec'};
	} else {
		$$self{'TargetSpec'}=$targetSpec;
	}
}

sub IsScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	return $MainScan->GetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
}

sub SetScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	$MainScan->SetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
	return 1;
}

sub SetScanInComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	if ($MainScan->DelStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName)){
		return 1;
	} else {
		return 0;
	}
}
sub MaxInstances {
	my $self=shift();
	return $$self{'MaxInstances'};
}
sub ConflictsWith {
	my $self=shift();
	return @{$$self{'ConflictingModules'}};
}

1;
