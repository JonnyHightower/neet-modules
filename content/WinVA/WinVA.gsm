##########################################################################
#
#    Neet: Network discovery, enumeration and security assessment tool
#    Copyright (C) 2008-2014 Jonathan Roach
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Contact: jonnyhightower [at] funkygeek.com
#
##########################################################################

# This Template is provided for use as a basis for your own modules.

# In case you haven't guessed, this is written in PERL. The code is run in a 'strict' environment, so
# make sure to use "my" to limit the scope of your variables, or the module will fail to load.

# The only code areas you should modify are:

# * The "Customise these parameters" area in the "new" subroutine
# * The code for the actual test in the "activate" subroutine, after "Beginning of module-specific code"
#   and before "End of module-specific code".

# The rest of the code should remain unmodified. You may wish to remove a lot of these example comments
# for the sake of readability of your code.
package WinVA;

sub new {
	my $pkg=shift();
	my %struct;
	$struct{'Name'}=$pkg;
	$struct{'MainScan'}=shift();
	my $self=\%struct;
	bless $self, $pkg;

	# >>>>>>>>>>>>>>>>>>>>>>>>>>>
	# Customise these parameters

	# If $struct{'Enabled'} is 0, the module won't be loaded, and therefore won't test anything.
	# As this is a template module, we don't really want it to run.
	$struct{'Enabled'}=1;

	# If your module only tests a UDP or TCP service, put a lower-case protocol name in $struct{'Protocol'}.
	$struct{'Protocol'}='';

	# @{$struct{'WatchFiles'}} is an array of files to watch in the "services" directory.
	# You can specify more than one. If any of them change, your module will be activated with the new services.
	@{$struct{'WatchFiles'}}=("../windows.txt");

	# Cost is used to determine how resource-intensive your module is. As modules are started, their cost is added
	# up, and once the budget is reached, no more modules will start until some finish and release more budget.
	# As a rule, 10 is a lightweight test, and 100 is something intensive like nikto or an SMB brute-force.
	$struct{'Cost'}=30;

	# $struct{'OnePerHost'} should be 0 if more than one instance of this service is to be tested per host. Most
	# modules will be set this way. If it is set to 1, then your module will only be told about the host IP, and
	# not a protocol or port. Services such as SMB are typically need a setting of 1, otherwise all the SMB tests
	# will be performed on both 139 and 445.
	$struct{'OnePerHost'}=1;

	# $struct{'MaxInstances'} determines the maximum number of instances of this service that are allowed to run
	# simultaneously, even if there is room in the budget to run more. This is to prevent some modules hogging
	# all the resources. A value of 0 means that there is no limit (apart from the budget constraints).
	$struct{'MaxInstances'}=1;

	#	$struct{'ConflictingModules'} is an array containing the names (without file extensions) of modules which
	# should prevent this one from running.
	@{$struct{'ConflictingModules'}}=('');

	# End parameter customisation
	# >>>>>>>>>>>>>>>>>>>>>>>>>>>

	return $self;
}

sub activate {
	# This is the subroutine that contains the actual code. 
  # First, some code which will be common to all modules - setting up the environment
	my $self=shift();
	my $MainScan=$$self{'MainScan'};
	my $target=shift();
	my $file=shift();
	my $threadID=Neet::threads->tid;
	my $cost=$$self{'Cost'};
	my $name=$$self{'Name'};
	my $Config=$MainScan->Config;
	my $Log=$MainScan->Log;
	my ($host,$protport) = split (":", $target);
	my $socket=$host;
	my ($protocol,$port);
	my $BasePrefix=$Config->GetVal("BasePrefix");
	my $outputDir=$MainScan->ResultsDirectory . "/$host";
	my $resourceDir=$MainScan->ResourceDirectory . "/modules/$name";
	my ($targetType,$interface)=$MainScan->IsHostLocal($host);
	($protocol,$port) = split ("/", $protport) if ($protport);
	$socket .= ":$port" if ($port);
	return 0 if ($protocol && $$self{'Protocol'} && ("$protocol" ne "$$self{'Protocol'}"));
	# Don't scan if the host is cancelled
	if ($MainScan->IsHostCancelled($host)){
		$Log->Status ("$name (thread $threadID) -> scans against $target CANCELLED\n","LOGONLY");
		return 0;
	}
	$0 = "Neet - GSM: $name thread $threadID testing $target";

	# Get architecture and OS
	my ($Architecture,$OS);
	my @hostinfo=$MainScan->ReadFile("${outputDir}/hostInfo.txt");
	for my $line (@hostinfo){
		chomp $line;
		my $junk;
		if ($line =~ /^Architecture /){
			($junk,$Architecture)=split (" ", $line, 2);
		}
		if ($line =~ /^OS /){
			($junk,$OS)=split (" ", $line, 2);
		}
	}

	# Where's metasploit?
	my $msf2dir="${BasePrefix}/pkg/framework2";
	my $msf2cli="${msf2dir}/msfcli";
	my $msfdir="/opt/metasploit/app";
	my $msfcli="${msfdir}/msfcli";


	if (!$self->IsScanComplete("$name","$target")){
		# Tell the user what we're doing
		$Log->Status ("GSM $name (thread $threadID) -> Scanning $socket ($targetType $interface)\n");

		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>
		#>>>>>>>>>>>>> Beginning of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>>     >>>>>>>>>>>>>   >>>>>>>>>>>>>   >>>>>>>>>>>>>

		# These are the variables you can use in your code:
		# $target - the raw target specification as it is supplied to this subroutine by the scheduler.
		#           Unless you want to process this for any particular reason, you're better off using the
    #           $host, $protocol, $port or $socket variables below.
		# $host - the IP address of the target
		# $port - the port on which the service is listening (not set for "OnePerHost" modules)
		# $protocol - the protocol on which the service is listening (not set for "OnePerHost" modules)
		# $socket - same as $host, unless $port is set, in which case it is set to "$host:$port".
		# $name - the name of this module
		# $cost - the cost of this module
		# $threadID - the Perl ithread ID for this thread
		# $outputDir - the full absolute path to the directory of results for this $host
		# $resourceDir - the full absolute path to the directory of resources for this module.
		#                This is normally /usr/local/share/neet/resources/modules/$name, so for this
		#                module, $resourceDir would be /usr/local/share/neet/resources/modules/Example
		# $BasePrefix - the full absolute path to the neet installation - usuall /usr/local/share/neet

		# These are the objects you can access
		# $self - This module
		# $MainScan - MainScan object, which provides most of neet's method calls.
		# $Config - The interface to the configuration file
		# $Log - The interface to the logging and screen printing mechanism

		# The API for recording issues is as follows:
		# RecordIssue(target, label, text)
		# RecordVulnerability(target, label, text)
		#	RecordCompromise(target, label, text)
		#	StoreGuessedPassword(target, level, service, username, password, label, text)
		# MissingPatch(target, level, service, patch, label, text)
		#	ConfigError(target, level, label, text)

		# Include any Perl modules you may require
		use Neet::VceConfig;

		# Set up the signal handler for exiting cleanly
		$SIG{'USR1'}=sub{
			$self->SetScanInComplete("$name","$target");
			Neet::threads->exit();
		};

		# And now the code for the actual test:

		my $pluginDir="${resourceDir}/plugins";
		my $Vce=Neet::VceConfig->new ("/opt/neet/etc/vce.conf");
		my $vulns=0;
		my $bindir="${BasePrefix}/pkg/bin";

		#if ($MainScan->PreviousScan){
		#	# Check if we had any vuln data from a previous run
		#	for my $scan ($MainScan->ReadFile("${outputDir}/missingPatches.txt")){
		#		next if (!$scan || $scan !~ /\S/);
		#			$vulns++;
		#	}
		#}

		my $Timeout=$Config->GetVal("Speeds.$targetType.WinVA." . $MainScan->Speed);
		my $autoExploited=0;

		for my $check ($Vce->Checks){
			if (!$self->IsScanComplete("check$check",$target)){

				my ($ctype,$cname,$desc,$msref,$cve,$bid,$testcmd,$testvulnout,$noTest)=("","","","","","","","","");
				my $enabled=0;

				$ctype=$Vce->Type("$check");
				next if ("$ctype" ne "Windows");

				$cname=$Vce->Name("$check");
				$enabled=$Vce->Enabled("$check");
				if (!$enabled){
					$Log->Info ("GSM thread $threadID ($name -> $target): not running disabled check $cname on $host\n",'LOGONLY');
					next;
				}

				$noTest=$Vce->NoTest("$check");
				if ($noTest && $OS && ($OS =~ /$noTest/)){
					$Log->Info ("GSM thread $threadID ($name -> $target): NOT running check $cname on $OS $host\n");
					next;
				}

				$desc=$Vce->Desc("$check");
				$msref=$Vce->Msref("$check");
				$bid=$Vce->Bid("$check");
				$cve=$Vce->Cve("$check");
				$testcmd=$Vce->Check("$check");
				$testcmd =~ s/HOST/$host/g; $testcmd =~ s/PLUGINDIR/$pluginDir/g; $testcmd =~ s/\[BIN\]/$bindir/g;
				$testvulnout=$Vce->Vuln("$check");
				my ($cmd,$args)=split (" ", $testcmd, 2);

				if (index($cmd,"/") ne 0){
					my $pathToCmd = $MainScan->getPath("$cmd");
					if ($pathToCmd){
						$testcmd = "$pathToCmd $args";
					}
				}

				my $scandata = "$check $cname\t($desc)";
				$scandata .= " ";
				$scandata .= $msref if ($msref);
				$scandata .= " ";
				$scandata .= $cve if ($cve);

				$Log->Info ("GSM thread $threadID ($name -> $target): running check $cname on $host\n",'LOGONLY');
				my $_vuln=0;
				my ($rc,$testout)=$MainScan->TimedBackticks($Timeout,$testcmd);
				if ($testout && $testout =~ /$testvulnout/){
					$_vuln=1;
				}

				if ($rc == 99){
					$Log->Warn("GSM thread $threadID ($name -> $target): $cname timed out","LOGONLY");
				} else {
					if ($_vuln){
						$vulns++;
						$MainScan->MissingPatch($target, "vuln", "WinVA", "$msref", "GSM-WinVA-$msref", "$msref $desc");

						if (!$MainScan->GetStatKey("${outputDir}/hostInfo.txt","AddedAccount") && $MainScan->AutoExploit && $Vce->Exautosafe("$check")){
							my $exType=$Vce->Extype("$check");
							my $exArch=$Vce->Exarch("$check");

							# Don't run 32-bit exploits on 64-bit architecture
							if ($Architecture && ($Architecture =~ /$exArch/)){
								my $exploitcmd=$Vce->Exautocmd("$check");
								$Log->Warn("GSM thread $threadID ($name -> $target): AutoExploiting $desc\n");
								my $target=0;

								if ($exploitcmd =~ /\[AUTOTARGET\]/){
									$target=autoTarget ($check,$OS);
								}

									sub autoTarget {
										no warnings;
										my $check=shift();
										my $OS=shift(); $OS=~s/\s//g;
										my $t=$Vce->GetVal($check,"extarget.$OS");
										$Log->Info ("GSM thread $threadID ($name -> $target): Check $cname auto-selected target $t ($OS)",'LOGONLY');
										return $t;
									}

								if (defined($target)){
									$exploitcmd =~ s/\[AUTOTARGET\]/$target/g;

									my $newuser=$Config->GetVal("NewUser");
									my $newpassword=$Config->GetVal("NewPassword");

									$exploitcmd =~ s/=HOST/=$host/g; $exploitcmd =~ s/\[USERNAME\]/$newuser/g; $exploitcmd =~ s/\[PASSWORD\]/\"$newpassword\"/g; $exploitcmd =~ s/\[BIN\]/$bindir/g; $exploitcmd =~ s/PORT/$port/g; $exploitcmd =~ s/MSFCLI/$msfcli/g; $exploitcmd =~ s/MSF2CLI/cd ${msf2dir} && .\/msfcli/g;
									if ($exType =~ /2/){
										$cmd="cd ${msf2dir} && ./msfcli $exploitcmd";
									} else {
										$cmd="$msfcli $exploitcmd";
									}

									my $rc=$MainScan->System("$cmd >/dev/null 2>&1");
									if (!$rc){
										my $message="Autoexploit added system account: \"$newuser\" \"$newpassword\"";
										$MainScan->RecordCompromise($target,"GSM-WinVA-AE-$msref",$message);
										$MainScan->SetStatValue("${outputDir}/hostInfo.txt","AddedAccount","$newuser");
									} else {
										$Log->Info("GSM thread $threadID ($name -> $target): Exploit for $msref FAILED to add system account: \"$newuser\"",'LOGONLY');
									}
								}
							}
						}
					}
				}
				last if ($MainScan->WasPaused);
				$self->SetScanComplete("check$check",$target);
			} else {
				$Log->OK("GSM thread $threadID ($name -> $target): $plugin previously completed - skipping",'LOGONLY');
			}
		}

		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>
		#>>>>>>>>>>>>> End of module-specific code >>>>>>>>>>>>>>
		#>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>   >>>>>>>>>>>>

		# Don't modify anything below this line.
		$self->SetScanComplete("$name","$target");
	} else {
		$Log->Status ("GSM $name (thread $threadID) -> $socket already scanned - skipping\n","LOGONLY");
	}
	$Log->Status ("GSM $name (thread $threadID) -> $socket FINISHED scanning\n");
	return 0;
}

sub SingleScan {
	my $self=shift;
	return $$self{'OnePerHost'};
}

sub Name {
	my $self=shift();
	return $$self{'Name'};
}
sub Cost {
	my $self=shift();
	return $$self{'Cost'};
}
sub Enabled {
	my $self=shift();
	return $$self{'Enabled'};
}
sub Watching {
	my $self=shift();
	return @{$$self{'WatchFiles'}};
}

sub TargetSpec {
	my $self=shift();
	my $targetSpec=shift();
	if (!defined($targetSpec)){
		return $$self{'TargetSpec'};
	} else {
		$$self{'TargetSpec'}=$targetSpec;
	}
}

sub IsScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	return $MainScan->GetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
}

sub SetScanComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	$MainScan->SetStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName);
	return 1;
}

sub SetScanInComplete {
	my $self=shift();
	my $name=shift();
	my $target=shift();
	my ($host,$junk)=split ":", $target;
	my $MainScan=$$self{'MainScan'};
	my $scanName="GSM_${name}_$target";
	if ($MainScan->DelStatKey($MainScan->ResultsDirectory . "/$host/.gsmcomplete",$scanName)){
		return 1;
	} else {
		return 0;
	}
}
sub MaxInstances {
	my $self=shift();
	return $$self{'MaxInstances'};
}
sub ConflictsWith {
	my $self=shift();
	return @{$$self{'ConflictingModules'}};
}

1;
